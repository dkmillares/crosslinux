     File: 21_How_To_Use_crosslinux.txt
Copyright: (C) 2013 Douglas Jerome <djerome@crosslinux.org>
  License: Creative Commons Attribution Share Alike (CC-by-sa), v2.5

============================
21_How_To_Use_crosslinux.txt
============================

-- Document Outline --
1. Initial Conditions for These Examples
2. Start a Project
3. Make Site-specific Customization
4. Link to the Cross-tool Chain
5. Build the Cross-tool Chain
6. Build the Target Linux System
7. Description of cl-bt Commands
   7.1 Build Tool System Commands
   7.2 Housekeeping Commands
   7.3 Build Commands
8. Boot Schema

        ----------------------------------------------------------------
        This file describes the steps for using crosslinux to make
        ttylinux-i486; this shows how to use most of the crosslinux
        build tool capabilities.
        ----------------------------------------------------------------

----------------------------------------
1. Initial Conditions for These Examples
----------------------------------------

In the following example script commands, crosslinux is installed into
~/projects/crosslinux; this is different from the source directory of
crosslinux that you downloaded, which also was the crosslinux build directory.
Remember from "11_How_To_Install_crosslinux.txt" that you have downloaded a
crosslinux directory tree and you did "./configure <options>" and
"make install" commands in that directory: in this case you installed
crosslinux from that build directory into ~/projects/crosslinux, and now you
want to use the installed crosslinux build tool.

From "12_How_To_Setup_crosstool-NG.txt", the cross-tool chain builder,
crosstool-NG, is installed in the directory ~/projects/crosstool-ng-1.19.0/

So for the examples in this file, you have these directories:

~/projects/cl-dev/ ................ original crosslinux source/build directory
~/projects/crosslinux/ ............ crosslinux installed in here
~/projects/crosstool-ng-1.19.0/ ... crosstool-NG installed in here

------------------
2. Start a Project
------------------

You make an arbitrary new directory and begin (cross) building your target
Linux system.  You can make several new empty directories and each have a
different target Linux system build, each in its own state of build progress.

Go to an empty directory; maybe a new directory named for the kind of target
Linux system you want to make, like "ttylinux-i486".

You need to have the installed crosslinux bin directory in your PATH so you can
make crosslinux commands.  crosslinux was installed with a very small script
you can "source" to add the installed crosslinux path to PATH; this script is
smart enough to add to PATH only if needed, so you can use it multiple times
without growing PATH more than needed.

# the lib64 versions of these files were missing -- trying to use the 32-bit versions as a workaround.
$ cd ~/projects/crosslinux/lib64/cl-bt.0.0.4/kconfig-exec
$ ln -s ../../../lib/cl-bt.0.0.4/kconfig-exec/* .

$ mkdir ~/projects/ttylinux-i486
$ cd ~/projects/ttylinux-i486
$ source ~/projects/crosslinux/bin/setenv.sh

Now you are ready to give crosslinux build tool commands.  There is one basic
command: cl-bt.  You can give the command with no arguments and it will give
you some terse help.

$ cl-bt  # do this to see the terse help text

The command you need to use to initialize the directory for building your
target Linux system is 'cl-bt bt-init'.  Use this command and then look at the
directory; there are a number of new directories that will be used while
building the target system.

Next, you would want to make a configuration file that defines the target Linux
system to build.  Use the 'cl-bt menuconfig' command and explore the
configuration options.  When you are done, save the configuration file and
notice the new "crosslinux-config.sh" file; this is the crosslinux configuration
file.

Notice that the default configuration when you use 'cl-bt menuconfig' with no
existing configuration file is a minimal i486 configuration.  It should work.

After you have a crosslinux configuration file, use 'cl-bt dload' to download
the needed source packages.  You may not want to do this yet because you will
delete this configuration file in the next step.

-----------------------------------
3. Make Site-specific Customization
-----------------------------------

Notice the ~/projects/cl-dev/integ directory has a ttylinux-i486-<version>
directory.  This directory has the crosslinux configuration for making the
latest version of ttylinux-i486.

Remove any crosslinux-config.sh file youmay have created in your project
directory and copy the ttylinux-i486 crosslinux configuration file.  Also,
untar the site directory that has some build-time customization that makes
the target Linux system be ttylinux-i486.  Use the actual version number for
<version> in the example script commands below.

$ rm crosslinux-config.sh
$ cp ~/projects/cl-dev/integ/ttylinux-i486-2014.11/crosslinux-config.sh .
$ tar xf ~/projects/cl-dev/integ/ttylinux-i486-2014.11/site.tbz

You can understand most of the site directory by looking through the menuconfig
items and the items in the site directory.  An explanation of all the items in
the site directory is beyond the current scope of this file, but is planned.

Make the list of packages and the loader list, and then download the needed
source packages.

$ cl-bt pkglist
$ cl-bt ldrlist
$ cl-bt dload

-------------------------------
4. Link to the Cross-tool Chain
-------------------------------

At this point you need to command 'cl-bt menuconfig' and examine the
ttylinux-i486 configuration.  Look through each section.  Notice the first
section has the ttylinux "brand" name and release name and release version.
The distribution website entry is put into the target system's init script
and is printed when the target system boots.

See the third section "Cross-tool Chain and Build Configuration".  Look at
the help for the first four items.  The path to the cross-tool chain bin
directory is the crosslinux build tool primary link to the cross-tool chain.

You now should be thinking: I don't have an i486 cross-tool chain; all I have
is a cross-tool chan builder.  Now is time to build the i486 cross-tool chain,
but you first needed to see the expected location of the cross-tool chain in
this crosslinux configuration file.

As you see the default for all the actual cross-tool chains is in ~/x-tools,
and this specific i486 cross-tool chain is expected to be in
~/x-tools/i486-generic-linux-gnu/; an x86_64 cross-tool chain would be in
~/x-tools/x86_64-generic-linux-gnu/, and so on.

You can use some location other than ~/x-tools, but you need to change it in
this crosslinux configuration file, and in the crosstool-NG configuration file
which you are about to use.  These must match or the crosslinux build tool
won't find the cross-tool chain nor the Linux kernel source from the
"Path to Cross-tool Chain Target Manifest".

-----------------------------
5. Build the Cross-tool Chain
-----------------------------

~/projects/cl-dev/integ/ttylinux-i486-<version>/crosstool-ng.config is the
crosstool-NG configuration file used to make the i486 cross-tool chain.  Copy
this file to the crosstool-NG directory and give the command to make the
cross-tool chain.

$ cd ~/projects/crosstool-ng-1.19.0/
$ cp ~/projects/cl-dev/integ/ttylinux-i486-2014.11/crosstool-ng.config .config
*** ERROR *** : setup some paths in the .config file.
$ ./ct-ng build

Have a coffee; the cross-tool chain build will take a few minutes.  Maybe go
back to the crosslinux project directory, ~/projects/ttylinux-i486, and play
with cl-bt commands, like 'cl-bt bt-showcfg', or maybe play with menuconfig,
'cl-bt menuconfig'.

--------------------------------
6. Build the Target Linux System
--------------------------------

After making the i486 cross-tool chain go to the crosslinux project directory,
~/projects/ttylinux-i486, and make the bootable target Linux system ISO image.

$ cd  ~/projects/ttylinux-i486
$ source ~/projects/crosslinux/bin/setenv.sh # if you haven't done this in this terminal
$ cl-bt dist

Or, make the bootable target Linux system ISO image in several steps.

$ cd  ~/projects/ttylinux-i486
$ source ~/crosslinux/bin/setenv.sh # if you haven't done this in this terminal
$ cl-bt clean
$ cl-bt pkgs
$ cl-bt loader
$ cl-bt kernel
$ cl-bt rootfs
$ cl-bt bootfs
$ cl-bt bootimg

Find the ISO image file in the target/image/ directory.

--------------------------------
7. Description of cl-bt Commands
--------------------------------

------------------------------
7.1 Build Tool System Commands
------------------------------

-------------------------
7.2 Housekeeping Commands
-------------------------

------------------
7.3 Build Commands
------------------

These commands make more sense if you know the build process is performed in
six particular steps.  These steps are:

     1. pkgs    - Make the packages.
     2. loader  - Make the boot loader.
     3. kernel  - Make the kernel.
     4. rootfs  - Make the root file system.
     5. bootfs  - Make the boot file system; staging directory for bootimg.
     6. bootimg - Make the image file of the boot file system.

Command           Description
-------           -------------------------------------------------------------

cl-bt dist ...... Do the whole build.  Build the packages, the boot loader, the
                  kernel, and then make the root file system, the staging
                  directory for the boot file system, and then finally make the
                  image file of the boot file system.  These steps can be done
                  individually; see the commands below.

cl-bt stat ...... Report the status of the build process, in terms of the six
                  build steps and whether or not they are each done.  Look for
                  the work 'NOT'.

cl-bt clean ..... Remove the all of the built items: packages, boot loader,
                  kernel, root file system, boot file system, and the image
                  file of the boot file system.

cl-bt kclean .... Remove the kernel build; this deletes the kernel and any
                  kernel modules.

cl-bt lclean .... Remove the loader build; this deleted the boot loader file(s).

cl-bt pclean .... Remove the all the built packages.

cl-bt pkgs ...... Build the only the packages; they are listed in a build
                  configuration file named 'crosslinux-pkglst.txt'.

cl-bt pkgs_ ..... Continue building the packages in the case the package
                  building was interrupted.  This is a developer convenience
                  when debugging or developing a package build process.

cl-bt loader .... Build the target boot loader; do this before building the
                  kernel because the kernel build process may use it.

cl-bt kernel .... Build the target kernel.

cl-bt rootfs .... Build root file system and put it into an initrd, or an
                  initramfs, or a tarball.  There may be no choice allowed; a
                  given target platform may be limited to one method.
                  See the crosslinux target boot schema in section 8.

cl-bt bootfs .... Build boot staging directory for iso9660 or for tarball.
                  There may be no choice allowed; a given target platform may
                  be limited to one method.
                  See the crosslinux target boot schema in section 8.

cl-bt bootimg ... Build boot file system image: iso9660 or tarball.  There may
                  be no choice allowed; a given target platform may be limited
                  to one method.
                  See the crosslinux target boot schema in section 8.

--------------
8. Boot Schema
--------------

The tables herein need a wider window to clearly see.
<-------------------------------------------------------------------------------------------------->

This section describes the crosslinux target system boot preparation as
performed by the build commands describe above.  There are different boot
schemes for different target platforms.

Table 8-1 "Boot Schema Matrix" shows possible output result of cl-bt commands
that make the root and boot file systems.  The output result for each of these
cl-bt commands depends upon the type of root file system to be made for the
particular target platform i.e., pc_i486, pc_i686, pc_x86_64, mac_g4,
beaglebone, etc.

NOTICE  Most of the entries in the table 8-1 "Boot Schema Matrix" are not
        implemented or not properly handled by the crosslinux build tool.  See
        list 8-1 "Processes for Making the Target Boot Systems" following the
        table.

                            ------------------------------------------
                            ***** Table 8-1 "Boot Schema Matrix" *****
                            ------------------------------------------

cl-bt                                                                           cl-bt
Command            Type of Root File System         Appropriate Boot Media      Command Notes
---+---            ------------v-----------         ---+------------------      -------+-----
   |                           |                       |                               |
   |           ----------------^-----------------      |                               |
   |          |                                  |     |                               |
   |          |            ram disk              |     |                               |
   |           initramfs     intrd     persistent      |                               |
   V           ==========  ==========  ==========      V                               V
                                                  |
cl-bt rootfs   cpio arch   fs img      NA         | CD-ROM                {Make a root file system.}
               cpio arch   fs img      tarball    | SDCard
               cpio arch   fs img      tarball    | USB Drive
               cpio arch   fs img      tarball    | HD Partition
                                                  |
cl-bt bootfs   dir struct  dir struct  NA         | CD-ROM           {Add boot to root file system.}
               dir struct  dir struct  dir struct | SDCard
               dir struct  dir struct  dir struct | USB Drive
               dir struct  dir struct  dir struct | HD Partition
                                                  |
cl-bt bootimg  iso img     iso img     NA         | CD-ROM            {Make boot file system image.}
               tarball     tarball     tarball    | SDCard
               tarball     tarball     tarball    | USB Drive
               tarball     tarball     tarball    | HD Partition
                                                  |
cl-bt media    cdrecord    cdrecord    NA         | CD-ROM                 {Format and write media.}
               txfer       txfer       install    | SDCard
               txfer       txfer       install    | USB Drive
               txfer       txfer       install    | HD Partition

     NA ....... Not Applicable
     fs img ... RAM Disk File System Image

List 8-1 "Processes for Making the Target Boot Systems" shows the actual output
results of the crosslinux build tool commands for the various target platforms.
Some target platforms may have several options for booting, such as root file
system format for ephemeral systems (Live CD-ROM) or whether to be a persistent
hard drive based system.

                -------------------------------------------------------------------
                ***** List 8-1 "Processes for Making the Target Boot Systems" *****
                -------------------------------------------------------------------

Target Platform   Root FS   cl-bt Command     Output Result
---------------   -------   -------------     -------------

pc_i486           initrd    cl-bt rootfs .... RAM Disk File System Image
                            cl-bt bootfs .... Bootable ISO9660 Directory Tree, With Extras [*]
                            cl-bt bootimg ... Bootable ISO9660 File Image
                            cl-bt media ..... (not implemented)

beaglebone        tarball   cl-bt rootfs .... File System Tarball
                            cl-bt bootfs .... Model Bootable ISO9660 Directory Tree, With Extras [*]
                            cl-bt bootimg ... Tarball of Model Bootable ISO9660 Directory Tree [1]
                            cl-bt media ..... (not implemented)

                            [*] - staging area for next command
                            [1] - overwrites the file system tarball

[eof]
